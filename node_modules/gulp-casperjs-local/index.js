'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

var _gulpUtil = require('gulp-util');

var _npmRoot = require('npm-root');

var _npmRoot2 = _interopRequireDefault(_npmRoot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PLUGIN_NAME = 'gulp-casperjs-local';

exports.default = function () {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$command = _ref.command;
  var command = _ref$command === undefined ? 'test' : _ref$command;
  var _ref$envArgs = _ref.envArgs;
  var envArgs = _ref$envArgs === undefined ? {} : _ref$envArgs;

  var files = [];

  var cmd = [];
  if (Array.isArray(command)) {
    cmd = command;
  } else if (typeof command === 'string') {
    cmd = command.split(' ');
  }

  function read(file, enc, cb) {
    if (file.isStream()) {
      this.emit('error', new _gulpUtil.PluginError({
        plugin: PLUGIN_NAME,
        message: 'Streams are not supported'
      }));
      cb(null, file);
      return;
    } else if (!file.isNull()) {
      files.push(file.path);
    }

    this.push(file);
    cb(null, file);
  }

  function end(cb) {
    var _this = this;

    (0, _npmRoot2.default)(function (err, localPath) {
      if (err) {
        cb(err);
        return;
      }

      var bin = _path2.default.join(localPath, '/.bin');
      var PATH = bin + ':' + process.env.PATH;
      var env = _extends({ PATH: PATH }, envArgs);

      var casperChild = (0, _child_process.spawn)('casperjs', cmd.concat(files), { env: env });

      casperChild.stdout.on('data', function (data) {
        var msg = data.toString().slice(0, -1);
        (0, _gulpUtil.log)(PLUGIN_NAME, msg);
      });

      casperChild.on('close', function (code) {
        if (code !== 0) {
          _this.emit('error', new _gulpUtil.PluginError({
            plugin: PLUGIN_NAME,
            message: code
          }));
        }
        cb();
      });
    });
  }

  return _through2.default.obj(read, end);
};
