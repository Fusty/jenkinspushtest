import path from 'path';
import { spawn } from 'child_process';
import through from 'through2';
import { PluginError, log } from 'gulp-util';
import npmRoot from 'npm-root';

const PLUGIN_NAME = 'gulp-casperjs-local';

export default ({
  command = 'test',
  envArgs = {},
} = {}) => {
  const files = [];

  let cmd = [];
  if (Array.isArray(command)) {
    cmd = command;
  } else if (typeof command === 'string') {
    cmd = command.split(' ');
  }

  function read(file, enc, cb) {
    if (file.isStream()) {
      this.emit('error', new PluginError({
        plugin: PLUGIN_NAME,
        message: 'Streams are not supported',
      }));
      cb(null, file);
      return;
    } else if (!file.isNull()) {
      files.push(file.path);
    }

    this.push(file);
    cb(null, file);
  }

  function end(cb) {
    npmRoot((err, localPath) => {
      if (err) {
        cb(err);
        return;
      }

      const bin = path.join(localPath, '/.bin');
      const PATH = `${bin}:${process.env.PATH}`;
      const env = { PATH, ...envArgs };

      const casperChild = spawn('casperjs', cmd.concat(files), { env });

      casperChild.stdout.on('data', data => {
        const msg = data.toString().slice(0, -1);
        log(PLUGIN_NAME, msg);
      });

      casperChild.on('close', code => {
        if (code !== 0) {
          this.emit('error', new PluginError({
            plugin: PLUGIN_NAME,
            message: code,
          }));
        }
        cb();
      });
    });
  }

  return through.obj(read, end);
};
